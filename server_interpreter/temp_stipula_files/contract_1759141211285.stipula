stipula Bike_Rental_Refined {
  assets wallet
  fields cost, rentingTime, code, deposit
  agreement (Lender, Borrower, Authority)(cost, rentingTime, code, deposit) {
    Lender, Borrower : rentingTime, cost, deposit
  } => @Inactive

  @Inactive Lender : offer(x)[]{
    x -> code
  } => @Payment

  @Payment Borrower : pay()[h](h==(cost + deposit)){
    h -o wallet
    code -> Borrower
    now + now + rentingTime >> @Using {
        EndReached -> Borrower
    } => @Return
  } => @Using

  @Using Borrower : end()[]{
    now -> Lender
  } => @Return

  @Return Lender : rental_Ok()[]{
    (cost*wallet) -o wallet, Lender
    (deposit*wallet) -o wallet, Borrower
  } => @End

  @Return Lender : rental_Late_or_Damage()[]{
    wallet -o Lender
  } => @End

  @Using@Return@End Lender : dispute(x)[]{
    x -> Authority
  } => @Dispute

  @Using@Return@End Borrower : dispute(x)[]{
    x -> Authority
  } => @Dispute

  @Dispute Authority : verdict(x, y)[](y>=0 && y<=1){
    x -> Lender
    x -> Borrower
    ((y * wallet)*wallet) -o wallet, Lender
    wallet -o Borrower
  } => @End
}